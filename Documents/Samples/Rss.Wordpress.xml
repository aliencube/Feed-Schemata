<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    >

    <channel>
        <title>Aliencube Community &#187; Weird Meetup</title>
        <atom:link href="http://blog.aliencube.org/tag/weird-meetup/feed/" rel="self" type="application/rss+xml" />
        <link>http://blog.aliencube.org</link>
        <description>.NET focused open source developers community</description>
        <lastBuildDate>Thu, 02 Jan 2014 03:36:29 +0000</lastBuildDate>
        <language>en-US</language>
        <sy:updatePeriod>hourly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>
        <generator>http://wordpress.org/?v=3.8</generator>
        <item>
            <title>자바스크립트에서 strict mode를 사용해야 하는 이유</title>
            <link>http://blog.aliencube.org/ko/2014/01/02/reasons-behind-using-strict-mode-while-coding-javascript/</link>
            <comments>http://blog.aliencube.org/ko/2014/01/02/reasons-behind-using-strict-mode-while-coding-javascript/#comments</comments>
            <pubDate>Thu, 02 Jan 2014 03:36:29 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[ECMAScript 5]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Strict Mode]]></category>
            <category><![CDATA[Translation]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://blog.aliencube.org/?p=86</guid>
            <description><![CDATA[이 포스트는 Stack Overflow의 What does “use strict” do in JavaScript, and what is the reasoning behind it?의 질문과 답변을 번역한 내용입니다. 자바스크립트에서 use strict는 뭘 하는 것이고, 왜 그걸 써야 하나요? 질문: 최근에 내가 짰던 자바스크립트 코드를 크록포드의 JSLint를 통해 실행시켰더니 아래와 같은 에러가 나타났습니다: Problem at line 1 character 1: Missing &#8220;use strict&#8221; <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2014/01/02/reasons-behind-using-strict-mode-while-coding-javascript/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>이 포스트는 <a href="http://stackoverflow.com">Stack Overflow</a>의 <a href="http://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it">What does “use strict” do in JavaScript, and what is the reasoning behind it?</a>의 질문과 답변을 번역한 내용입니다.</p>

<h2>자바스크립트에서 <code>use strict</code>는 뭘 하는 것이고, 왜 그걸 써야 하나요?</h2>

<p><em>질문</em>:</p>

<p>최근에 내가 짰던 자바스크립트 코드를 크록포드의 <a href="http://www.jslint.com">JSLint</a>를 통해 실행시켰더니 아래와 같은 에러가 나타났습니다:</p>

<blockquote>
  <p>Problem at line 1 character 1: Missing &#8220;use strict&#8221; statement.</p>
</blockquote>

<p>검색을 좀 해봤는데, 몇몇 사람들이 <code>"use strict;"</code> 라인을 그들의 자바스크립트 코드에 추가했다는 것을 알아챘습니다. 저도 이것을 따라서 추가해 봤더니, 위의 에러가 더이상 나타나지 않네요. 구글에서 검색을 해 봤는데, 이것을 추가하는 이유에 대해서 딱히 찾을 수가 없더라구요. 분명히 이것을 통해 브라우저가 자바스크립트를 해석하는 데 영향을 주는 것 같은데, 이걸 사용하면 나타날 수 있는 효과에 대한 것에 대한 것을 전혀 모르겠습니다.</p>

<p><code>"use strict";</code>가 도대체 무엇이고, 이것이 의미하는 것은 무엇이며, 필요하긴 한 건가요?</p>

<p>현재 쓰이고 있는 브라우저들이 이 <code>"use strict";</code> 문자열에 대응하는지요, 아니면 향후에 쓰일 것에 대한 대비인가요?</p>

<ul>
<li><a href="http://stackoverflow.com/users/25847/mark-rogers">Mark Rogers</a>, 2009년 8월 26일에 질문</li>
<li><a href="http://stackoverflow.com/users/527702/hippietrail">hippietrail</a>, <a href="http://stackoverflow.com/posts/1335851/revisions">2012년 10월 30일에 질문 수정</a></li>
</ul>

<hr />

<p><em>답변</em>: (가장 추천수가 높은 것만을 번역했습니다: 역자 주)</p>

<p>이 문서가 도움이 될 겁니다: <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more">John Resig &#8211; ECMAScript 5 Strict Mode, JSON, and More</a></p>

<p>인상적인 부분을 살짝 인용하자면:</p>

<blockquote>
  <p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a &#8220;strict&#8221; operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>
  
  <p><code>Strict Mode</code>는 ECMAScript 5 버전에 있는 새로운 기능으로써, 당신의 프로그램 또는 함수를 <strong>엄격한</strong> 운용 콘텍스트 안에서 실행시킬 수 있게끔 합니다. 이 엄격한 콘텍스트는 몇가지 액션들을 실행할 수 없도록 하며, 좀 더 많은 예외를 발생시킵니다.</p>
</blockquote>

<p>이와 더불어:</p>

<blockquote>
  <p>Strict mode helps out in a couple ways:</p>
  
  <ul>
  <li>It catches some common coding bloopers, throwing exceptions.</li>
  <li>It prevents, or throws errors, when relatively &#8220;unsafe&#8221; actions are taken (such as gaining access to the global object).</li>
  <li>It disables features that are confusing or poorly thought out.</li>
  </ul>
  
  <p><code>Strict Mode</code>는 몇가지 면에서 도움이 되는데:</p>
  
  <ul>
  <li>흔히 발생하는 코딩 실수를 잡아내서 예외를 발생시킵니다.</li>
  <li>상대적으로 <em>안전하지 않은</em> 액션이 발생하는 것을 방지하거나 그럴 때 예외를 발생시킵니다. 예를 들자면 전역객체들에 접근하려 한다거나 하는 것들이겠지요.</li>
  <li>혼란스럽거나 제대로 고려되지 않은 기능들을 비활성화시킵니다.</li>
  </ul>
</blockquote>

<p>이 <code>strict mode</code>는 파일 전체에 적용시킬 수도 있고, 아니면 특정한 함수 안에서만 적용시킬 수도 있습니다.</p>

<pre><code>// Non-strict code...

(function(){
    "use strict";

    // Define your library strictly...
})();

// Non-strict code...
</code></pre>

<p>위와 같은 방식으로 한다면, 예전의 레거시 코드와 새 코드가 한 파일 안에 섞여 있을 때 도움이 될 것입니다.</p>

<p>아마도 이 <code>"use strict";</code>는 왠지 Perl 에서 온 것 같기도 하네요. 이것을 사용함으로써 오류가 발생할 수 있는 좀 더 많은 부분을 검사할테니, 훨씬 더 적은 에러를 만들 수 있을 겁니다.</p>

<hr />

<p><em>역자 추가</em>:</p>

<p>위의 내용과 더불어 <a href="http://caniuse.com/use-strict">Can I use ECMAScript 5 Strict Mode?</a> 페이지를 보면 지원하는 브라우저의 버전을 제공하고 있는데, IE는 이 <strong>strict mode</strong>를 버전 10부터 지원한다. 그렇다고 해서 낮은 버전의 IE를 위해서 쓰지 말아야 하는가 하면 그렇지도 않다. 위에 언급한 <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more">John Resig의 포스트</a>를 다시 인용하자면:</p>

<blockquote>
  <p>This means that you can turn strict mode on in your scripts &ndash; today &ndash; and it&#8217;ll have, at worst, no side effect in old browsers.</p>
  
  <p><strong>strict mode</strong>를 지금 당장 활성화 시켜야 한다는 것을 의미하고, 이전 브라우저에서는 최악의 경우에라도 아무런 부작용이 없습니다.</p>
</blockquote>

<p>따라서, 기존의 자바스크립트 코드에 대해 좀 더 엄격한 검사를 실행시키고 싶다면 문서의 첫 줄에 <code>"use strict";</code>를 추가하고, 기존의 것은 그대로 놔두고, 새로운 코드에 대해서만 추가하고 싶다면 각각의 함수 블록 처음에 추가하는 것이 좋겠다.</p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2014/01/02/reasons-behind-using-strict-mode-while-coding-javascript/feed/</wfw:commentRss>
            <slash:comments>1</slash:comments>
        </item>
        <item>
            <title>Alienstrap for WordPress</title>
            <link>http://blog.aliencube.org/en/2013/12/19/alienstrap-for-wordpress/</link>
            <comments>http://blog.aliencube.org/en/2013/12/19/alienstrap-for-wordpress/#comments</comments>
            <pubDate>Wed, 18 Dec 2013 23:07:18 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[English]]></category>
            <category><![CDATA[Alienstrap]]></category>
            <category><![CDATA[Theme]]></category>
            <category><![CDATA[Twitter Bootstrap]]></category>
            <category><![CDATA[Weird Meetup]]></category>
            <category><![CDATA[Wordpress]]></category>

            <guid isPermaLink="false">http://blog.aliencube.org/?p=79</guid>
            <description><![CDATA[I am pleased to announce that our Aliencube Community officially launches a WordPress theme called Alienstrap for WordPress (Alienstrap). Alienstrap is a WordPress theme using Twitter Bootstrap 3. This provides a basic and simple UI that let visitors keep focusing on your contents, rather than being distracted from other stuffs. You can find its source <span>[<a class="read-more" href="http://blog.aliencube.org/en/2013/12/19/alienstrap-for-wordpress/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>I am pleased to announce that our <strong>Aliencube Community</strong> officially launches a <a href="http://wordpress.org">WordPress</a> theme called <strong>Alienstrap for WordPress (Alienstrap)</strong>.</p>

<p><img src="/wp-content/uploads/2013/12/alienstrap-300x262.png" alt="" /></p>

<p><strong>Alienstrap</strong> is a <a href="http://wordpress.org">WordPress</a> theme using <a href="http://getbootstrap.com">Twitter Bootstrap 3</a>. This provides a basic and simple UI that let visitors keep focusing on your contents, rather than being distracted from other stuffs. You can find its source code on <a href="https://github.com/aliencube/Alienstrap-for-Wordpress">http://github.com/aliencube/Alienstrap-for-Wordpress</a>. This is of course released under <a href="https://github.com/aliencube/Alienstrap-for-Wordpress/blob/master/LICENSE">The MIT License</a> so please feel free to use.</p>

<p>One important thing. If you find any bugs, improvements, suggestion or whatsoever, while using <strong>Alienstrap</strong>, please do not hesitate raising issues on <a href="https://github.com/aliencube/Alienstrap-for-Wordpress/issues">Issue Tracker</a>.</p>

<p>Cheers,</p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/en/2013/12/19/alienstrap-for-wordpress/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>데메테르의 법칙 Law of Demeter</title>
            <link>http://blog.aliencube.org/ko/2013/12/06/law-of-demeter-explained/</link>
            <comments>http://blog.aliencube.org/ko/2013/12/06/law-of-demeter-explained/#comments</comments>
            <pubDate>Fri, 06 Dec 2013 12:46:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[Law of Demeter]]></category>
            <category><![CDATA[Method Chaining]]></category>
            <category><![CDATA[Object Oriented Programming]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=6</guid>
            <description><![CDATA[데메테르는 그리스 신화에 나오는 추수의 신이다. 로마신화에서는 세레스 Ceres 라고 불리는 바로 그 신. 하지만, 그 데메테르하고 이 법칙하고는 상관없다는 것이 함정. [위키피디아]1에서는 데메테르의 법칙을 아래와 같이 정의하고 있다. 데메테르의 법칙에서는 어떤 객체 O의 메소드 m는 다음과 같은 종류의 객체에 있는 메소드들만 실행시킬 수 있다. O 자체 m 의 변수 m 안에서 만들어진 객체 O가 <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/12/06/law-of-demeter-explained/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>데메테르는 그리스 신화에 나오는 추수의 신이다. 로마신화에서는 세레스 Ceres 라고 불리는 바로 그 신. 하지만, 그 데메테르하고 이 법칙하고는 상관없다는 것이 함정. [위키피디아]<sup id="fnref-6:p69165446353-1"><a href="p69165446353-1" target="_blank" rel="footnote">1</a></sup>에서는 데메테르의 법칙을 아래와 같이 정의하고 있다.</p>

<blockquote>데메테르의 법칙에서는 어떤 객체 <code>O</code>의 메소드 <code>m</code>는 다음과 같은 종류의 객체에 있는 메소드들만 실행시킬 수 있다.
<ol>
    <li><code>O</code> 자체</li>
    <li><code>m</code> 의 변수</li>
    <li><code>m</code> 안에서 만들어진 객체</li>
    <li><code>O</code>가 직접 관리하는 콤포넌트 객체</li>
    <li><code>m</code>의 스코프 안에서 <code>O</code>가 접근 가능한 전역변수</li>
</ol>
</blockquote>

<p>좀 말이 어려운데, <a href="http://www.blackwasp.co.uk/FAQ.aspx" target="_blank">Richard Carr</a>의 [The Law of Demeter]<sup id="fnref-6:p69165446353-2"><a href="p69165446353-2" target="_blank" rel="footnote">2</a></sup> 포스트에 좀 더 쉬운 설명이 있다.</p>

<blockquote>어떤 클라스의 멤버 – 메소드 또는 속성 – 는 반드시 다음과 같은 객체들의 멤버들만을 실행시켜야 한다:
<ul>
    <li>해당 메소드 또는 속성이 선언된 객체</li>
    <li>메소드의 파라미터로 보내진 객체</li>
    <li>메소드 또는 속성이 직접 초기화시킨 객체</li>
    <li>호출을 위한 메소드 또는 속성으로서 같은 클라스 안에서 선언된 객체</li>
    <li>전역 객체</li>
</ul>
</blockquote>

<p>아래 예제 코드를 보자. ASP.NET MVC 웹사이트를 개발하다보면 콘트롤러에서 흔히 볼 수 있는 상황이다.</p>

<pre><code>public class ProductController : Controller
{
    private IProductService _service;

    public ProductController(IProductService service)
    {
        this._service = service;
    }

    public ActionResult Index()
    {
        var products = this._service.Repository.Get();

        return View(products);        
    }
}

public class ProductService : IProductService
{
    public ProductService(IProductRepository repository)
    {
        this.Repository = repository;
    }

    public IProductRepository Repository { get; private set; }
}
</code></pre>

<p>위의 코드에서 <code>Index</code> 액션을 보면 대략 예상이 가능하겠지만 <code>ProductService</code>라는 서비스 레이어 안에서 <code>ProductRepository</code>라는 데이터 리포지토리 패턴을 통해 CRUD를 구현하고 있다. <code>Index</code> 액션은 전체 제품 리스트를 보여주는 뷰를 갖고 있어서 전체 제품 리스트는 서비스 안에 구현된 리포지토리의 <code>Get</code> 메소드를 통해 가져오게 된다. 이렇게 메소드 체이닝을 하는 것이 바로 데메테르의 법칙을 위반하는 것이 된다. <code>ProductController</code> 객체는 생성자를 통해 변수로 받은 <code>ProductService</code> 객체의 메소드 또는 속성을 호출해야 하지 그 내부에 있는 <code>ProductRepository</code> 객체의 <code>Get</code> 메소드를 직접 호출해서는 안된다. <code>ProductRepository</code> 객체의 현재 상태가 <code>null</code>이라면 해당 코드는 <code>NullReferenceException</code>을 던지기 때문이다. 따라서 <code>ProductService</code> 클라스 안에 추가적인 메소드를 선언해주는 방식으로 리팩토링을 해야 한다.</p>

<pre><code>public class ProductController : Controller
{
    private IProductService _service;

    public ProductController(IProductService service)
    {
        this._service = service;
    }

    public ActionResult Index()
    {
        var products = this._service.GetProducts();

        return View(products);        
    }
}

public class ProductService : IProductService
{
    private IProductRepository _repository;

    public ProductService(IProductRepository repository)
    {
        this._repository = repository;
    }

    public IList&lt;Product&gt; GetProducts()
    {
        return this._repository.Get();
    }
}
</code></pre>

<p>즉 <code>ProductRepository</code> 객체를 <code>public</code> 속성이나 필드로 두는 것이 아니라 내부적으로 encapsulation 시키고 <code>ProductRepository</code> 클라스의 멤버는 <code>ProductService</code> 클라스의 멤버를 통해 호출하는 방식으로 하게 되면, <code>ProductController</code> 클라스는 직접적으로 관련이 있는 콤포넌트인 <code>ProductSerivce</code>에 대해서만 통제권을 가질 수 있어서 보다 안전하고 유연한 코드를 작성할 수 있게 된다.</p>

<p>이런식으로 메소드 체이닝을 최대한 줄이는 것이 바람직한 객체지향 프로그래밍이라고 할 수 있겠다. 하지만 이렇게 프로그래밍을 하게 되면 추가적인 메소드를 작성해야 하는 부담이 생기게 되는데, 이것이 꼭 부정적이라고는 할 수 없는 것이 객체 사이의 의존성을 최소화하는 방식으로 유연하게 개발을 할 수 있기 때문이다.</p>

<p>단, LINQ를 쓰는 상황이라면 얘기가 달라진다. LINQ에서는 특성상 메소드 체이닝이 필수일 수 밖에 없는지라, 이 데메테르의 법칙에서 벗어날 수 있는데, 그 이유는 메소드 체이닝을 하는 것과 상관없이 항상 리턴타입이 동일하기 때문이다. 위의 예제 코드에 나온 <code>ProductRepository</code> 클라스의 <code>Get</code> 메소드는 아마도 내부적으로 아래와 같이 구현이 되어 있을 것이다.</p>

<pre><code>public class ProductRepository : IProductRepository
{
    private CompanyDataContext _context;

    public ProductRepository(ICompanyDataContext context)
    {
        this._context = context as CompanyDataContext;
    }

    public IList&lt;Product&gt; Get()
    {
        return this._context
                   .Products
                   .Where(p =&gt; p.IsActive)
                   .OrderBy(p =&gt; p.DateRegistered)
                   .ToList();
    }
}
</code></pre>

<p>여기서 <code>Products</code>, <code>Where</code> 그리고 <code>OrderBy</code>는 모두 동일한 <code>IEnumerable&lt;Product&gt;</code> 객체를 반환한다. 즉 LINQ를 이용한 메소드 체이닝의 경우 메소드마다 동일한 데이터 타입을 반환하기 때문에 이 데메테르의 법칙을 위반하지 않고 안전하게 사용할 수 있다.</p>

<hr />

<p>참조:</p>

<ul>
    <li>[Law of Demeter][^1] from Wikipedia</li>
    <li>[The Law of Demeter][^2] by Richard Carr</li>
</ul>

<div class="footnotes">

<hr />

<ol>
    <li id="fn-6:p69165446353-1"><a href="http://en.wikipedia.org/wiki/Law_of_Demeter%C2%A0" target="_blank">http://en.wikipedia.org/wiki/Law_of_Demeter </a><a href="p69165446353-1" target="_blank" rev="footnote">↩</a></li>
    <li id="fn-6:p69165446353-2"><a href="http://www.blackwasp.co.uk/LawOfDemeter.aspx%C2%A0" target="_blank">http://www.blackwasp.co.uk/LawOfDemeter.aspx </a><a href="p69165446353-2" target="_blank" rev="footnote">↩</a></li>
</ol>
</div>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/12/06/law-of-demeter-explained/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>엔티티 프레임워크 Code First 방법론 #3</title>
            <link>http://blog.aliencube.org/ko/2013/10/18/entity-framework-code-first-approach-part-3/</link>
            <comments>http://blog.aliencube.org/ko/2013/10/18/entity-framework-code-first-approach-part-3/#comments</comments>
            <pubDate>Fri, 18 Oct 2013 13:38:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[Code First]]></category>
            <category><![CDATA[Entity Framework]]></category>
            <category><![CDATA[ORM]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=7</guid>
            <description><![CDATA[엔티티 프레임워크 Code First 방법론 #1 엔티티 프레임워크 Code First 방법론 #2 엔티티 프레임워크 Code First 방법론 #3 Foreign Key 설정하기 앞서 Data Annotation 방법을 통해 테이블의 컬럼들에 대한 속성을 제어하는 방법에 대해 알아보았다. 이번에는 테이블 각각에 대한 관계를 설정하는 방법에 대해 논의해 보도록 하자. 현재 Products 테이블과 Orders 테이블은 각각 상품 정보, 주문 정보를 <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/10/18/entity-framework-code-first-approach-part-3/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<ol>
<li><a href="http://blog.aliencube.org/post/62605843304/entity-framework-code-first-approach-part-1" target="_blank">엔티티 프레임워크 Code First 방법론 #1</a></li>
<li><a href="http://blog.aliencube.org/post/62712905291/entity-framework-code-first-approach-part-2" target="_blank">엔티티 프레임워크 Code First 방법론 #2</a></li>
<li>엔티티 프레임워크 Code First 방법론 #3</li>
</ol>
<h3>Foreign Key 설정하기</h3>
<p>앞서 Data Annotation 방법을 통해 테이블의 컬럼들에 대한 속성을 제어하는 방법에 대해 알아보았다. 이번에는 테이블 각각에 대한 관계를 설정하는 방법에 대해 논의해 보도록 하자.</p>
<p>현재 <code>Products</code> 테이블과 <code>Orders</code> 테이블은 각각 상품 정보, 주문 정보를 가지고 있다. 이 둘은 many-to-many 관계이므로, 정규화를 거쳐 one-to-many 관계로 바꾸어 주어야 하는데, 그 결과로 <code>ProductOrders</code> 테이블이 만들어졌다. 따라서, 이 <code>ProductOrders</code> 테이블에 있는 <code>ProductId</code>와 <code>OrderId</code>가 Forein Key 로서 역할을 해야 한다. 아래와 같이 <code>ProductOrder</code> 클라스를 수정해 보자.</p>
<pre><code>public class ProductOrder
{
    [Key]
    public int ProductOrderId { get; set; }

    [Required(ErrorMessage = "ProductId must be set")]
    public int ProductId { get; set; }

    [ForeignKey("ProductId")]
    public virtual Product Product { get; set; }

    [Required(ErrorMessage = "OrderId must be set")]
    public int OrderId { get; set; }

    [ForeignKey("OrderId")]
    public virtual Order Order { get; set; }

    [Required(ErrorMessage = "AmountOrdered must be set")]
    public int AmountOrdered { get; set; }
}
</code></pre>
<p>위 코드에서 주목해야 할 부분은 <code>public virtual Product Product { get; set; }</code> 부분과 <code>public virtual Order Order { get; set; }</code> 부분이다. <code>ProductOrder</code> 클라스가 <code>ProductId</code>, <code>OrderId</code> 필드를 각각 해당하는 <code>Product</code>, <code>Order</code> 클라스의 Foreign Key 로서 인식시키기 위하여 버추얼 프로퍼티를 추가시켰다. 이렇게 추가시켜 컴파일 한 후, F5 키를 다시 한 번 눌러 이 변경사항을 반영시켜 보자. 그리고, SQL Server Management Studio 를 통해 변경된 사항을 확인해 보도록 하자.</p>
<p><img src="http://media.tumblr.com/6649846e2c18b93db4331147a1e6d5c8/tumblr_inline_muv9wej11M1qzhmhx.png" alt="" /></p>
<p>위 이미지에서 볼 수 있다시피 <code>ProductId</code>와 <code>OrderId</code>가 Foreign Key로 지정이 되었고, 해당하는 키값은 테이블 스키마와 테이블 이름의 조합 – 여기서는 <code>dbo.ProductOrders_dbo.Products_ProductId</code> – 으로 이루어진 것을 볼 수 있다.</p>
<p>다음에는 Fluent API를 이용하여 테이블을 생성하는 방법을 알아보도록 하자.</p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/10/18/entity-framework-code-first-approach-part-3/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>AngularJS 디펜던시 인젝션(DI) 이해하기</title>
            <link>http://blog.aliencube.org/ko/2013/10/16/understanding-dependency-injection-on-angularjs/</link>
            <comments>http://blog.aliencube.org/ko/2013/10/16/understanding-dependency-injection-on-angularjs/#comments</comments>
            <pubDate>Wed, 16 Oct 2013 14:00:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[AngularJS]]></category>
            <category><![CDATA[Dependency Injection]]></category>
            <category><![CDATA[DI]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=8</guid>
            <description><![CDATA[객체지향 프로그래밍에서 Dependency Injection (DI) 개념은 아주 중요한데, 개별 객체들 사이에 의존성이 줄어들어야 – 다른 말로 느슨한 결합 (loosely coupled)을 이루거나 – 유지보수 및 확장성, 그리고 테스트 가용성 측면에서 많은 이득을 볼 수 있다. 일반적으로 Java 또는 C# 프로그래밍에서는 아래와 같은 형태로 DI를 구성한다. public class ProductController : ApiController { public ProductController(IProductService service) { this._service <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/10/16/understanding-dependency-injection-on-angularjs/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>객체지향 프로그래밍에서 Dependency Injection (DI) 개념은 아주 중요한데, 개별 객체들 사이에 의존성이 줄어들어야 – 다른 말로 느슨한 결합 (loosely coupled)을 이루거나 – 유지보수 및 확장성, 그리고 테스트 가용성 측면에서 많은 이득을 볼 수 있다. 일반적으로 Java 또는 C# 프로그래밍에서는 아래와 같은 형태로 DI를 구성한다.</p>
<pre><code>public class ProductController : ApiController
{
    public ProductController(IProductService service)
    {
        this._service = service;
    }

    private IProductService _service;

    public HttpResponseMessage Get(int id)
    {
        var product = this._service.GetProduct(id);
        return new HttpResponseMessage(200, product);
    }
}
</code></pre>
<p>위의 코드는 C#으로 구현한 간단한 Web API 콘트롤러이다. 콘트롤러 인스턴스를 초기화할 때, 생성자의 파라미터로서 <code>IProductService</code> 인터페이스를 가진 인스턴스를 주입시킨다. 이렇게 하면 저 콘트롤러는 파라미터로 들어온 인스턴스가 어떻게 내부적으로 구현이 되는지 알 필요가 없다. 따라서, <code>ProductService</code> 클라스에 변경사항이 생겨도 아무런 문제가 되질 않는다.</p>
<p>이런 식으로 DI를 구성하는 것이 일반적인데, AngularJS에서는 독특한 방식으로 DI를 생성한다. 아무래도 자바스크립트라는 스크립트 언어의 특성 때문이 아닐까 싶기도 한데, 이부분은 여기서 논의할 것은 아니니 다른 기회를 이용하도록 하자. AngularJS에서 DI를 구현하는 방법은 상당히 다양하다. 우선 간단한 HTML 코드를 작성해 보자.</p>
<pre><code>&lt;html ng-app="diSample"&gt;
    &lt;body&gt;
        &lt;div ng-controller="sampleController"&gt;
            &lt;ul&gt;
                &lt;li&gt;text: {{text}}&lt;/li&gt;
                &lt;li&gt;di1text1: {{di1text1}}&lt;/li&gt;
                &lt;li&gt;di1text2: {{di1text2}}&lt;/li&gt;
                &lt;li&gt;di2text: {{di2text}}&lt;/li&gt;
                &lt;li&gt;di3text: {{di3text}}&lt;/li&gt;
                &lt;li&gt;di4text: {{di4text}}&lt;/li&gt;
                &lt;li&gt;di5text: {{di5text}}&lt;/li&gt;
                &lt;li&gt;di6text: {{di6text}}&lt;/li&gt;
                &lt;li&gt;di7text: {{di7text}}&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><code>diSample</code>이라는 모듈의 <code>sampleController</code>를 통해 총 아홉개의 데이터를 바인딩 시키는 모델이다. 저 콘트롤러를 담은 자바스크립트는 아래와 같다.</p>
<pre><code>(function(angular) {
    var module = angular.module("diSample", []);

    module.controller("sampleController", function($scope) {
        $scope.text = "TEXT";
    });
})(angular);
</code></pre>
<p>이렇게 하면 <code>{{text}}</code> 부분이 <code>TEXT</code>로 바뀌어 나오게 된다. 여기서 DI를 적용시켜보자. 우선 <code>$provide</code> 서비스를 이용하는 방법이다.</p>
<pre><code>module.config(function ($provide) {
    $provide.provider("di1", function(){
        this.$get = function(){
            return function($scope, text) {
                $scope.di1text2 = "DI1 TEXT 2";
                return text;
            };
        };
    });
});
</code></pre>
<p><code>$provide</code> 서비스를 이용해서 <code>di1</code>이라는 인스턴스를 생성한다. 그리고 콘트롤러 선언부분을 아래와 같이 수정해 준다.</p>
<pre><code>module.controller("sampleController", function($scope, di1) {
    $scope.text = "TEXT";
    $scope.di1text1 = di1($scope, "DI1 TEXT 1");
});
</code></pre>
<p>이렇게 하면 콘트롤러에서 <code>di1()</code> 인스턴스를 호출하게 되면 그 결과가 <code>$scope.di1text1</code>과 <code>$scope.di1text2</code>에 반영되어 화면에 나타난다. 하지만, 이것보다 좀 더 간단한 방법으로 동일한 결과를 얻을 수 있다. 위의 <code>module.config()</code> 안쪽에 아래와 같은 코드를 넣는다.</p>
<pre><code>$provide.factory("di2", function(){
    return function(text) {
        return text;
    };
});
</code></pre>
<p>이것은 위의 <code>$provide.provider()</code> 펑션을 좀 더 간단하게 한 것으로 <code>$provide.factory()</code> 펑션을 쓰고 있다. 이것을 더욱 간단하게 하면 아래와 같이 <code>$provide.value()</code> 형태로도 쓸 수 있다.</p>
<pre><code>$provide.value("di3", function(text) {
    return text;
});
</code></pre>
<p>이제 콘트롤러를 아래와 같이 바꾸어보자.</p>
<pre><code>module.controller("sampleController", function($scope, di1, d2, d3) {
    $scope.text = "TEXT";
    $scope.di1text1 = di1($scope, "DI1 TEXT 1");
    $scope.di2text = di2("DI2 TEXT");
    $scope.di3text = di3("DI3 TEXT");
});
</code></pre>
<p>이렇게 콘트롤러를 변경한 후에 결과를 확인해 보면<code>di1</code>, <code>di2</code>, <code>di3</code> 객체가 어떻게 쓰였는지 알 수 있다. 심지어 이보다 더 간단하게 DI를 적용시킬 수도 있다. 위의 예제 코드는 모두 <code>module.config()</code> 안에 <code>$provide</code> 서비스를 포함시킨 후 그 스코프 안에서 DI를 위한 객체들을 생성시켜 놓는 것이었다면, 이것을 좀 더 간단하게 해서 <code>module.provider()</code>, <code>module.factory()</code>, <code>module.value()</code> 형태로도 사용할 수 있다. 아래 코드를 살펴보도록 하자.</p>
<pre><code>// Using "provider" shortcut
module.provider("di4", function(){
    this.$get = function(){
        return function(text) {
            return text;
        };
    };
});

// Using "factory" shortcut
module.factory("di5", function(){
    return function(text) {
        return text;
    };
});

// Using "value" shortcut
module.value("di6", function(text) {
    return text;
});
</code></pre>
<p>차이점을 발견할 수 있는가? 이렇게 만들어 놓은 객체들을 다시 콘트롤러를 수정하여 적용시켜 보자.</p>
<pre><code>module.controller("sampleController", function($scope, di1, d2, d3, d4, d5, d6) {
    $scope.text = "TEXT";
    $scope.di1text1 = di1($scope, "DI1 TEXT 1");
    $scope.di2text = di2("DI2 TEXT");
    $scope.di3text = di3("DI3 TEXT");
    $scope.di4text = di4("DI4 TEXT");
    $scope.di5text = di5("DI5 TEXT");
    $scope.di6text = di6("DI6 TEXT");
});
</code></pre>
<p>이렇게 콘트롤러를 수정한 후 결과를 보면 어떻게 달라졌는지 확인할 수 있을 것이다. 마지막으로 <code>$injector</code> 서비스를 이용하여 DI를 구현하는 방법이다. 위의 콘트롤러를 아래와 같이 수정하자.</p>
<pre><code>module.controller("sampleController", function($scope, $injector, di1, d2, d3, d4, d5, d6) {
    $scope.text = "TEXT";
    $scope.di1text1 = di1($scope, "DI1 TEXT 1");
    $scope.di2text = di2("DI2 TEXT");
    $scope.di3text = di3("DI3 TEXT");
    $scope.di4text = di4("DI4 TEXT");
    $scope.di5text = di5("DI5 TEXT");
    $scope.di6text = di6("DI6 TEXT");

    var di7 = $injector.get("di6")
    $scope.di7text = di7("DI7 TEXT");
});
</code></pre>
<p>이렇게 수정한 후에 다시 결과를 확인해 보도록 하자.</p>
<p>정리하자면, AngularJS에서 DI는 다양한 방법 – 여기서는 총 일곱가지 방법 – 으로 구현이 가능하다. 방법은 서로 다르지만 모두 동일한 결과를 가져온다. 그 중에서 가장 간결한 방법은 <code>module.value()</code> 방법이고, 가장 복잡한 방법은 <code>module.config()</code>에 <code>$provide</code> 서비스를 이용하여 <code>provider</code> 펑션을 호출하는 것이다. 간결할 수록 개발자가 콘트롤해야 하는 부분이 줄어들고, 복잡할 수록 개발자가 관여해야 하는 부분이 늘어난다. 요구사항의 복잡도에 따라 선택해서 사용하면 될 것이다.</p>
<p>이상으로 간단하게 AngularJS에서 DI를 활용하는 방법에 대해 논의해 보았다. 위의 코드는</p>
<p><a href="http://jsfiddle.net/bluemood/QC9pW/" target="_blank"><a href="http://jsfiddle.net/bluemood/QC9pW/" target="_blank">http://jsfiddle.net/bluemood/QC9pW/</a></a></p>
<p>이곳에서 테스트해 볼 수 있다.</p>
<p>참고:</p>
<ul>
<li><a href="https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection" target="_blank"><a href="https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection" target="_blank">https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection</a></a></li>
<li>유튜브 동영상: <a href="http://youtu.be/1CpiB3Wk25U?t=37m" target="_blank"><a href="http://youtu.be/1CpiB3Wk25U?t=37m" target="_blank">http://youtu.be/1CpiB3Wk25U?t=37m</a></a></li>
</ul>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/10/16/understanding-dependency-injection-on-angularjs/feed/</wfw:commentRss>
            <slash:comments>1</slash:comments>
        </item>
        <item>
            <title>정규표현식 성능 향상 팁</title>
            <link>http://blog.aliencube.org/ko/2013/10/15/improving-performances-while-using-regular-expressions/</link>
            <comments>http://blog.aliencube.org/ko/2013/10/15/improving-performances-while-using-regular-expressions/#comments</comments>
            <pubDate>Tue, 15 Oct 2013 04:32:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[Compile]]></category>
            <category><![CDATA[Regular Expression]]></category>
            <category><![CDATA[Runtime]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=9</guid>
            <description><![CDATA[데이터 웨어하우징에 ETL 프로세스는 반드시 필요하다. 이 과정에서 데이터 클렌징을 포함한 텍스트 프로세싱을 진행하게 되는데, 정규표현식은 이 텍스트 프로세싱의 핵심 요소들 중 하나이다. 일반적인 상황에서 정규표현식은 아래와 같은 형태로 사용한다. var value = "abcdefg"; var pattern = @"^abc"; if (Regex.IsMatch(value, pattern)) { Console.WriteLine("Match found"); } 위의 예제와 같이 정규표현식은 정적 메소드인 Regex.Ismatch()의 형태로 쓰였다. 물론 <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/10/15/improving-performances-while-using-regular-expressions/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>데이터 웨어하우징에 ETL 프로세스는 반드시 필요하다. 이 과정에서 데이터 클렌징을 포함한 텍스트 프로세싱을 진행하게 되는데, 정규표현식은 이 텍스트 프로세싱의 핵심 요소들 중 하나이다. 일반적인 상황에서 정규표현식은 아래와 같은 형태로 사용한다.</p>
<pre><code>var value = "abcdefg";
var pattern = @"^abc";
if (Regex.IsMatch(value, pattern))
{
  Console.WriteLine("Match found");
}
</code></pre>
<p>위의 예제와 같이 정규표현식은 정적 메소드인 <code>Regex.Ismatch()</code>의 형태로 쓰였다. 물론 아래와 같은 형태로 쓰일 수도 있다.</p>
<pre><code>var value = "abcdefg";
var pattern = @"^abc";
var regex = new Regex(pattern);
if (regex.IsMatch(value))
{
  Console.WriteLine("Match found");
}
</code></pre>
<p>위의 예제 코드는 정적 메소드인 <code>Regex.IsMatch()</code>를 사용하는 대신 <code>Regex</code> 인스턴스를 사용한다. 그렇다면 이 둘의 차이는 무엇일까? 바로 성능의 차이라고 할 수 있다. 컴파일 시점에 이미 정규표현식 객체를 포함하고 있는가, 런타임 시점에 그때그때 정규표현식 객체를 초기화 시켜 사용하는가의 차이라고도 할 수 있는데, 일반적인 용도로 사용한다면 두 가지 방법들 사이에는 큰 차이가 없다. 하지만, 대용량의 데이터를 처리하는데 있어서는 조그마한 차이가 엄청난 성능의 향상 혹은 저하를 가져올 수 있다.</p>
<p><code>Regex.IsMatch()</code> 메소드는 정적 메소드로서 내부적으로 아래와 같은 형태로 구현된다.</p>
<pre><code>public static IsMatch(string input, string pattern)
{
    var regex = new Regex(pattern);
    return regex.IsMatch(input);
}
</code></pre>
<p>즉, 정적 메소드를 호출할 때마다 <code>Regex</code> 인스턴스가 만들어지고, 쓰이고, 없어지기를 반복한다. 따라서, 동일한 반복작업을 하는 경우 동일한 <code>Regex</code> 인스턴스를 한 번 만들어두고 재활용을 한다면 엄청난 성능의 향상을 볼 수 있다. <a href="http://www.dotnetperls.com/regex-performance" target="_blank"><a href="http://www.dotnetperls.com/regex-performance" target="_blank">http://www.dotnetperls.com/regex-performance</a></a> 에서는 컴파일을 하게 된다면 대략 30%의 성능 향상을 나타낸다고 한다.</p>
<p>개발자들의 세계에서는 <strong>If you are doing something repeatedly, you are doing it wrong</strong> 이라는 금언이 있다. 즉, 뭔가 동일한 작업을 반복적으로 한다면, 그건 뭔가 잘못된 것이라는 것이다. 결국 그부분에서 성능 향상을 꾀할 수 있다는 말과 동일하다. 위의 정규표현식 예제도 마찬가지로, 동일한 정규표현식을 여러번 사용한다면, 그것은 미리 컴파일을 해놓고 재활용할 수 있게끔 하는 것이 성능 향상에 유리하다는 말과 동일하다.</p>
<p>참조:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5854063/how-to-optimize-regular-expression-performance" target="_blank"><a href="http://stackoverflow.com/questions/5854063/how-to-optimize-regular-expression-performance" target="_blank">http://stackoverflow.com/questions/5854063/how-to-optimize-regular-expression-performance</a></a></li>
<li><a href="http://stackoverflow.com/questions/414328/using-static-regex-ismatch-vs-creating-an-instance-of-regex" target="_blank"><a href="http://stackoverflow.com/questions/414328/using-static-regex-ismatch-vs-creating-an-instance-of-regex" target="_blank">http://stackoverflow.com/questions/414328/using-static-regex-ismatch-vs-creating-an-instance-of-regex</a></a></li>
<li><a href="http://www.dotnetperls.com/regex-performance" target="_blank"><a href="http://www.dotnetperls.com/regex-performance" target="_blank">http://www.dotnetperls.com/regex-performance</a></a></li>
<li><a href="http://blogs.msdn.com/b/bclteam/archive/2010/06/25/optimizing-regular-expression-performance-part-i-working-with-the-regex-class-and-regex-objects.aspx" target="_blank"><a href="http://blogs.msdn.com/b/bclteam/archive/2010/06/25/optimizing-regular-expression-performance-part-i-working-with-the-regex-class-and-regex-objects.aspx" target="_blank">http://blogs.msdn.com/b/bclteam/archive/2010/06/25/optimizing-regular-expression-performance-part-i-working-with-the-regex-class-and-regex-objects.aspx</a></a></li>
<li><a href="http://blogs.msdn.com/b/bclteam/archive/2010/08/03/optimizing-regular-expression-performance-part-ii-taking-charge-of-backtracking.aspx" target="_blank"><a href="http://blogs.msdn.com/b/bclteam/archive/2010/08/03/optimizing-regular-expression-performance-part-ii-taking-charge-of-backtracking.aspx" target="_blank">http://blogs.msdn.com/b/bclteam/archive/2010/08/03/optimizing-regular-expression-performance-part-ii-taking-charge-of-backtracking.aspx</a></a></li>
<li><a href="http://blogs.msdn.com/b/bclteam/archive/2011/03/28/optimizing-regex-performance-part-3-ron-petrusha.aspx" target="_blank"><a href="http://blogs.msdn.com/b/bclteam/archive/2011/03/28/optimizing-regex-performance-part-3-ron-petrusha.aspx" target="_blank">http://blogs.msdn.com/b/bclteam/archive/2011/03/28/optimizing-regex-performance-part-3-ron-petrusha.aspx</a></a></li>
</ul>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/10/15/improving-performances-while-using-regular-expressions/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>ASP.NET MVC 4 Web API 에서 null값 해결하기</title>
            <link>http://blog.aliencube.org/ko/2013/10/15/avoiding-null-via-jquery-or-angularjs-ajax-call-to-web-api/</link>
            <comments>http://blog.aliencube.org/ko/2013/10/15/avoiding-null-via-jquery-or-angularjs-ajax-call-to-web-api/#comments</comments>
            <pubDate>Mon, 14 Oct 2013 18:01:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[AngularJS]]></category>
            <category><![CDATA[jQuery]]></category>
            <category><![CDATA[JSON]]></category>
            <category><![CDATA[Web API]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=10</guid>
            <description><![CDATA[ASP.NET MVC 4 Web API를 사용하면 RESTful 웹서비스를 손쉽게 해결할 수 있다. 그런데, 문제는 jQuery 또는 AngularJS 같은 자바스크립트 라이브러리를 통해 AJAX 콜을 이용하여 JSON 문자열을 Web API로 넘겨주게 되면, 특히 POST 혹은 PUT 메소드의 경우, Web API 콘트롤러에서 null값으로 떨어지는 경우를 보게 된다. 이것은 JSON 문자열을 파싱할 때 해당 자바스크립트 프레임웍이 갖는 특징으로, 약간의 <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/10/15/avoiding-null-via-jquery-or-angularjs-ajax-call-to-web-api/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>ASP.NET MVC 4 Web API를 사용하면 RESTful 웹서비스를 손쉽게 해결할 수 있다. 그런데, 문제는 jQuery 또는 AngularJS 같은 자바스크립트 라이브러리를 통해 AJAX 콜을 이용하여 JSON 문자열을 Web API로 넘겨주게 되면, 특히 POST 혹은 PUT 메소드의 경우, Web API 콘트롤러에서 <code>null</code>값으로 떨어지는 경우를 보게 된다.</p>
<p>이것은 JSON 문자열을 파싱할 때 해당 자바스크립트 프레임웍이 갖는 특징으로, 약간의 부가적인 조치를 취해주면 해결할 수 있다.</p>
<pre><code>var data = {
    "id": 1,
    "username": "abc",
    "email": "abc@email.com"
};
</code></pre>
<p>위의 JSON 객체를 jQuery AJAX 콜을 통해 서버에 전송하는 경우와 AngularJS의 AjAX 콜을 통해 서버에 전송하는 경우를 살펴보자.</p>
<pre><code>// AJAX call using jQuery.
$.ajax({
    "type": "POST",
    "url": "/api/user",
    "dataType": "json",
    "data": JSON.stringify(data),
    "success": function(result) {
        // Do something
    }
});

// AJAX call using AngularJS
$http({
    "method": "POST",
    "url": "/api/user",
    "data": JSON.stringify(data)
}).success(function(result){
    // Do something.
});
</code></pre>
<p>Fiddler 또는 FireBug, 크롭 웹 개발자 도구 등을 통해 AJAX 리퀘스트 데이터를 보면 아래와 같다.</p>
<pre><code>{ "id": 1, "username": "abc", "email": "abc@email.com" }
</code></pre>
<p>그러나, 이 데이터는 Web API 콘트롤러를 통해 보면 <code>null</code>값으로 전송이 된다.</p>
<pre><code>public HttpResponseMessage Post([FromBody]string value)
{
    // Do something.
}
</code></pre>
<p>Web API 콘트롤러의 <code>Post</code> 메소드는 대략 위와 같은 형태가 될텐데, 이 때 <code>value</code>값이 <code>null</code>이 되는 것이다. 그 이유는 <code>JSON.stringify(data)</code>된 데이터 앞에 반드시 <code>=</code>가 있어야 하는데, 그것이 없기 때문이다. 이것을 해결하기 위해 다음과 같이 처리한다.</p>
<pre><code>// AJAX call using jQuery.
$.ajax({
    "type": "POST",
    "url": "/api/user",
    "dataType": "json",
    "data": { "": JSON.stringify(data) },
    "success": function(result) {
        // Do something
    }
});
</code></pre>
<p>jQuery 에서는 key 값이 없는 JSON 객체로 한 번 더 감싸주면 된다.</p>
<pre><code>// AJAX call using AngularJS
$http({
    "method": "POST",
    "url": "/api/user",
    "data": "=" + JSON.stringify(data),
    "headers": { "Content-Type": "application/x-www-form-urlencoded" }
}).success(function(result){
    // Do something.
});
</code></pre>
<p>AngularJS 에서는 단순히 <code>=</code>를 앞에 붙여주고, 헤더의 <code>Content-Type</code>을 기본값인 <code>application/json</code>에서 <code>application/x-www-form-urlencoded</code>으로 바꾸어준다. 그리고 나서 다시 Web API를 호출해 보면 정상적으로 JSON 스트링을 받아오는 것을 볼 수 있다.</p>
<p>참고: <a href="http://encosia.com/using-jquery-to-post-frombody-parameters-to-web-api" target="_blank"><a href="http://encosia.com/using-jquery-to-post-frombody-parameters-to-web-api" target="_blank">http://encosia.com/using-jquery-to-post-frombody-parameters-to-web-api</a></a></p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/10/15/avoiding-null-via-jquery-or-angularjs-ajax-call-to-web-api/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>엔티티 프레임워크 Code First 방법론 #2</title>
            <link>http://blog.aliencube.org/ko/2013/09/30/entity-framework-code-first-approach-part-2/</link>
            <comments>http://blog.aliencube.org/ko/2013/09/30/entity-framework-code-first-approach-part-2/#comments</comments>
            <pubDate>Mon, 30 Sep 2013 12:45:29 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[Code First]]></category>
            <category><![CDATA[Entity Framework]]></category>
            <category><![CDATA[ORM]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=11</guid>
            <description><![CDATA[엔티티 프레임워크 Code First 방법론 #1 엔티티 프레임워크 Code First 방법론 #2 데이터 타입 설정하기 앞서 Local DB에 테이블을 생성하는 방법까지 알아 보았다. 만들어진 테이블은 아래와 같다. 여기서 눈여겨 봐야 할 것은 각각의 필드 데이터 타입 및 크기이다. NULL vs NOT NULL NVARCHAR(MAX) decimal 데이터 타입 크기 int, datetime 앞의 글에서 언급한 바와 같이 엔티티 <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/09/30/entity-framework-code-first-approach-part-2/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<ol>
<li><a href="http://blog.aliencube.org/post/62605843304/entity-framework-code-first-approach-part-1" target="_blank">엔티티 프레임워크 Code First 방법론 #1</a></li>
<li>엔티티 프레임워크 Code First 방법론 #2</li>
</ol>
<h3>데이터 타입 설정하기</h3>
<p>앞서 Local DB에 테이블을 생성하는 방법까지 알아 보았다. 만들어진 테이블은 아래와 같다.</p>
<p><img src="http://media.tumblr.com/314d58fed2754c95fbb17b4e53c1a8d4/tumblr_inline_mtvvwwokys1qzhmhx.png" alt="" /></p>
<p>여기서 눈여겨 봐야 할 것은 각각의 필드 데이터 타입 및 크기이다.</p>
<ul>
<li><code>NULL</code> vs <code>NOT NULL</code></li>
<li><code>NVARCHAR(MAX)</code></li>
<li><code>decimal</code> 데이터 타입 크기</li>
<li><code>int</code>, <code>datetime</code></li>
</ul>
<p>앞의 글에서 언급한 바와 같이 <code>엔티티 이름 + Id</code> 형태의 프로퍼티가 있을 경우 해당 프로퍼티는 자동으로 <code>PK</code> 처리가 된다. <code>int</code>, <code>bool</code>, <code>DateTime</code> 같은 경우에는 기본적으로 <code>Nullable</code> 속성을 갖고 있지 않으므로 테이블 생성시에도 마찬가지로 자동으로 <code>NOT NULL</code> 속성을 갖는다. 반면에 <code>string</code> 데이터 타입의 경우에는 <code>NULL</code>을 허용하므로 테이블 필드 역시 <code>NULL</code>로 설정한다. 만약 <code>int</code>, <code>bool</code>, <code>DateTime</code> 데이터 타입을 갖는 필드에 <code>NULL</code> 값을 허용하려면 프로퍼티 설정시 <code>int?</code>, <code>bool?</code>, <code>DateTime?</code>과 같은 형태로 <code>Nullable</code> 속성을 추가해 주면 된다. 또한 닷넷 코드는 기본적으로 유니코드를 지원하므로 <code>string</code> 데이터 타입은 곧바로 <code>nvarchar</code> 타입으로 대응하게 된다.</p>
<p>그렇다면, 바로 이 <code>string</code> 데이터 타입의 크기는 어떻게 조정을 할까? 별다른 설정이 없을 경우에는 무조건 <code>MAX</code>값을 갖는데, 일반적으로 테이블의 필드는 <code>nvarchar</code> 타입이라 하더라도 최대 크기를 정해놓는다. 이렇게 데이터의 크기를 결정해주는 방법은 크게 두가지 방식이 있다.</p>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/data/jj591583.aspx" target="_blank">Data Annotations</a></li>
<li><a href="http://msdn.microsoft.com/en-us/data/jj591617" target="_blank">Fluent API</a></li>
</ul>
<p>여기서는 먼저 첫번째 Data Annotations 방식을 다루기로 하고 다음에 Fluent API를 논의하도록 하자.</p>
<h3>Data Annotations</h3>
<p>Data Annotation을 위해서는 각각의 클라스명 또는 프로퍼티명에 속성 클라스를 지정해 준다. 앞서 생성했던 엔티티들을 아래와 같이 바꾸어 보도록 하자.</p>
<pre><code>[Table("ProductInfo")]
public class Product
{
    [Key]
    public int ProductId { get; set; }

    [Required(ErrorMessage="ProductName must be set")]
    [MaxLength(128, ErrorMessage="ProductName is too long")]
    [MinLength(4, ErrorMessage="ProductName is too short")]
    public string ProductName { get; set; }

    [Column(Name="Description", TypeName="NTEXT")]
    public string ProductDescription { get; set; }

    [NotMapped]
    public string ProductAlias { get; set; }

    [Required(ErrorMessage = "UnitPrice must be set")]
    public decimal UnitPrice { get; set; }

    [Required(ErrorMessage = "DateCreated must be set")]
    public DateTime DateCreated { get; set; }
}

public class Order
{
    [Key]
    public int OrderId { get; set; }

    [Required(ErrorMessage = "DateOrdered must be set")]
    public DateTime DateOrdered { get; set; }

    [Required(ErrorMessage = "OrderBy must be set")]
    public int OrderBy { get; set; }
}

public class ProductOrder
{
    [Key]
    public int ProductOrderId { get; set; }

    [Required(ErrorMessage = "ProductId must be set")]
    public int ProductId { get; set; }

    [Required(ErrorMessage = "OrderId must be set")]
    public int OrderId { get; set; }

    [Required(ErrorMessage = "AmountOrdered must be set")]
    public int AmountOrdered { get; set; }
}
</code></pre>
<p>Data Annotation을 위해서는 크게 두가지 속성 클라스가 있다. 하나는 Validation 속성 클라스이고 다른 하나는 Annotation 속성 클라스이다. 위의 코드에서 <code>Required</code>, <code>MaxLength</code>, <code>MinLength</code> 등과 같은 속성 클라스들이 Validation 속성 클라스이고, <code>Key</code>, <code>NotMapped</code>, <code>Table</code>, <code>Column</code> 등과 같은 속성 클라스들을 가리켜 Annotation 속성 클라스라고 부른다. 이밖에도 더 많은 속성 클라스들이 있으니 자세한 사항은 MSDN을 참고하도록 하자.</p>
<p>이렇게 속성클라스들을 생성하고 난 후에 F5 키를 눌러 한 번 디버깅을 한 후 MS SQL Server Management Studio로 접속해서 테이블 구조를 확인해 보면 아래와 같이 변한 것을 확인할 수 있다.</p>
<p><img src="http://media.tumblr.com/697cb3004613d7f16af7fdc08673ded6/tumblr_inline_mtxvcsZqwU1qzhmhx.png" alt="" /></p>
<ul>
<li><code>Products</code> 테이블의 이름이 <code>ProductInfo</code>로 바뀌었다</li>
<li><code>ProductName</code> 컬럼의 데이터 크기가 <code>MAX</code>에서 <code>128</code>로 바뀌었다.</li>
<li><code>ProductDescription</code> 컬럼명이 <code>Description</code>으로 바뀌었다.</li>
<li><code>ProductDescription</code> 데이터 타입이 <code>NTEXT</code>로 바뀌었다.</li>
</ul>
<p>다음에는 각각의 테이블마다 FK를 설정하는 방법에 대해 논의해 보도록 하자.</p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/09/30/entity-framework-code-first-approach-part-2/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>엔티티 프레임워크 Code First 방법론 #1</title>
            <link>http://blog.aliencube.org/ko/2013/09/29/entity-framework-code-first-approach-part-1/</link>
            <comments>http://blog.aliencube.org/ko/2013/09/29/entity-framework-code-first-approach-part-1/#comments</comments>
            <pubDate>Sun, 29 Sep 2013 11:01:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[Code First]]></category>
            <category><![CDATA[Entity Framework]]></category>
            <category><![CDATA[ORM]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=12</guid>
            <description><![CDATA[엔티티 프레임워크 Code First 방법론 #1 엔티티 프레임워크 Code First 방법론 #2 엔티티 프레임워크(Entity Framework, EF)가 가진 수많은 장점들 중 하나는 데이터베이스로부터 직접 ORM 매핑 클라스를 생성해 준다는 데 있다. 데이터베이스 연결을 위한 로그인 정보만 지정해주면 해당 데이터베이스의 모든 테이블, 스토어드 프로시저, 함수 등을 모두 객체화하여 손쉽게 코드에서 사용할 수 있게 해주는 것이다. 하지만, 이 <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/09/29/entity-framework-code-first-approach-part-1/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<ol>
<li>엔티티 프레임워크 Code First 방법론 #1</li>
<li><a href="http://blog.aliencube.org/post/62712905291/entity-framework-code-first-approach-part-2" target="_blank">엔티티 프레임워크 Code First 방법론 #2</a></li>
</ol>
<p>엔티티 프레임워크(Entity Framework, EF)가 가진 수많은 장점들 중 하나는 데이터베이스로부터 직접 ORM 매핑 클라스를 생성해 준다는 데 있다. 데이터베이스 연결을 위한 로그인 정보만 지정해주면 해당 데이터베이스의 모든 테이블, 스토어드 프로시저, 함수 등을 모두 객체화하여 손쉽게 코드에서 사용할 수 있게 해주는 것이다. 하지만, 이 방법의 문제점들 중 하나는 데이터베이스 스키마를 갱신한 후 EF에서 해당 갱신 내역을 업데이트하면, 수동으로 설정한 부분들은 모두 사라지게 된다. 따라서, 이런 문제점을 해결하기 위해서는 보통 두가지 방법 중 하나를 사용한다.</p>
<ol>
<li><code>partial</code> 클라스를 이용하여 수동 변경 사항 분리시키기</li>
<li>EF Code FIrst 방법 적용하기</li>
</ol>
<p>여기서는 두번째 Code First 방법에 대해 논의해 보고자 한다. EF Code First 방법은 보통 아래와 같은 순서를 거쳐 적용할 수 있다.</p>
<h3>데이터베이스 Connection String 설정하기</h3>
<p>우선 <code>web.config</code> 혹은 <code>app.config</code> 파일의 <code>&lt;connectionStrings&gt;</code> 섹션을 아래와 같이 작성한다.</p>
<pre><code>&lt;connectionStrings&gt;
    &lt;clear /&gt;
    &lt;add name="ApplicationDataContext"
         connectionString="Data Source=(LocalDB)v11.0;Initial Catalog=ApplicationDatabase;Persist Security Info=True;Integrated Security=True;MultipleActiveResultSets=True;Connect Timeout=30"
         providerName="System.Data.SqlClient" /&gt;
&lt;/connectionStrings&gt;
</code></pre>
<p>위의 내용은 Visual Studio 2012부터 사용할 수 있는 Local DB를 이용하여 데이터베이스를 만드는 Connection String이다. 서버명은 <code>(LocalDB)v11.0</code>, 데이터베이스명은 <code>ApplicationDatabase</code>, 그리고 Windows 통합 인증 방법을 사용하는 것으로 설정해 두었다. 이 Connection String을 좀 더 보기 쉽게 설정하 싶다면 GitHub에 올라가 있는 오픈소스들 중 하나인 <a href="https://github.com/aliencube/Data-Access-Framework" target="_blank">Data Access Framework</a> 라이브러리를 참조할 수도 있다.</p>
<h3><code>DbContext</code> 클라스 상속 받기</h3>
<p>Connection String 설정이 끝났다면, 새로운 <code>ApplicationDataContext</code> 클라스를 하나 생성한다. 이 클라스는 <a href="http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=vs.103).aspx" target="_blank"><code>DbContext</code></a> 클라스를 상속받아 사용한다.</p>
<pre><code>public partial class ApplicationDataContext : DbContext
{
    #region Constructors

    public ApplicationDataContext()
        : base("ApplicationDatabase")
    {
        ...
    }

    public ApplicationDataContext(string connectionString)
        : base (connectionString)
    {
        ...
    }

    #endregion
}
</code></pre>
<p>이렇게 작성한 <code>ApplicationDataContext</code>는 아래와 같이 사용할 수 있다.</p>
<pre><code>using (var context = new ApplicationDataContext())
{
   ...
}
</code></pre>
<p>Constructor 파라미터 없이 직접 Context를 생성하는 것과, Connection String 파라미터를 받아 생성하는 것, 이렇게 두가지가 있다. 파라미터 없이 직접 Context를 생성하는 경우, 디폴트로 <code>ApplicationDataBase</code>를 이용한다. 만약, 지정한 데이터베이스 서버에 해당하는 이름이 없을 경우 새롭게 데이터베이스를 생성하게 된다.</p>
<pre><code>public partial class ApplicationDataContext : DbContext
{
    ...

    #region Properties

    public DbSet&lt;Product&gt; Products { get; set; }

    public DbSet&lt;Order&gt; Orders { get; set; }

    public DbSet&lt;ProductOrder&gt; ProductOrders { get; set; }

    #endregion
}
</code></pre>
<h3>엔티티 추가하기</h3>
<p>데이터베이스 설정이 끝났다면, 실제로 사용할 테이블을 지정해 주어야 한다. 위와 같이 <code>Products</code> 테이블과 <code>Orders</code> 테이블, 그리고 <code>ProductOrders</code> 테이블이 있다고 가정한다면 해당 엔티티 클라스를 아래와 같이 추가한다.</p>
<pre><code>public partial class Product
{
    public int ProductId { get; set; }

    public string ProductName { get; set; }

    public string ProductDescription { get; set; }

    public decimal UnitPrice { get; set;}

    public DateTime DateCreated { get; set; }
}

public partial class Order
{
    public int OrderId { get; set; }

    public DateTime DateOrdered { get; set; }

    public int OrderBy { get; set; }
}

public partial class ProductOrder
{
    public int ProductOrderId { get; set; }

    public int ProductId { get; set; }

    public int OrderId { get; set; }

    public int AmountOrdered { get; set; }
}
</code></pre>
<p>이렇게 <code>Product</code>, <code>Order</code>, <code>ProductOrder</code> 엔티티를 작성한 후 <code>F5</code> 키를 눌러 디버깅을 한 번 시도한다. 그리고 나서 Microsoft SQL Server Management Studio를 이용해 LocalDB로 접속해 보면 실제로 아래 그림과 같이 <code>ApplicationDatabase</code> 데이터베이스에 <code>Products</code>, <code>Orders</code>, <code>ProductOrders</code> 테이블이 만들어져 있는 것을 확인할 수 있다.</p>
<p><img src="http://media.tumblr.com/314d58fed2754c95fbb17b4e53c1a8d4/tumblr_inline_mtvvwwokys1qzhmhx.png" alt="" /></p>
<p>여기서 주목해야 할 부분이 하나 있는데, <code>ProductId</code>, <code>OrderId</code>, <code>ProductOrderId</code>는 모두 특별한 설정 없이도 <code>Primary Key</code>로 되어 있다. 이는 클라스의 이름에 <code>Id</code>가 붙으면 자동으로 PK로 인식하게끔 하는 EF의 자동 매핑 기능이다.</p>
<p>다음에는 이 엔티들 사이에 관계를 설정하는 것에 대해 논의해 보도록 하자.</p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/09/29/entity-framework-code-first-approach-part-1/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
        <item>
            <title>Entity Framework 커넥션 스트링 가변적으로 구성하기</title>
            <link>http://blog.aliencube.org/ko/2013/09/02/setting-up-connection-string-for-entity-framework-dynamically/</link>
            <comments>http://blog.aliencube.org/ko/2013/09/02/setting-up-connection-string-for-entity-framework-dynamically/#comments</comments>
            <pubDate>Mon, 02 Sep 2013 02:37:00 +0000</pubDate>
            <dc:creator><![CDATA[Justin Yoo]]></dc:creator>
            <category><![CDATA[한국어]]></category>
            <category><![CDATA[Connection String]]></category>
            <category><![CDATA[Entity Framework]]></category>
            <category><![CDATA[EntityConnection]]></category>
            <category><![CDATA[Weird Meetup]]></category>

            <guid isPermaLink="false">http://godaddy.aliencube.org/?p=13</guid>
            <description><![CDATA[Entity Framework (EF) 은 닷넷 어플리케이션 개발시 사용할 수 있는 ORM 도구들 중 하나이다. 다른 ORM 도구들에 비해 러닝커브도 적을 뿐 아니라 사용이 꽤 직관적이기 때문이다. 다만, 한가지 불편한 점이 있다면 데이터베이스 커넥션 스트링이 너무 길다는 것. 보통 web.config 혹은 app.config에 들어가는 EF 커넥션 스트링은 대략 아래와 같은 형태이다. &#60;connectionStrings&#62; &#60;add name="ApplicationDataContext" connectionString="metadata=res://*/ApplicationDataContext.csdl&#124;res://*/ApplicationDataContext.ssdl&#124;res://*/ApplicationDataContext.msl;provider=System.Data.SqlClient;provider connection string=&#38;quot;data <span>[<a class="read-more" href="http://blog.aliencube.org/ko/2013/09/02/setting-up-connection-string-for-entity-framework-dynamically/">...</a>]</span>]]></description>
            <content:encoded>
                <![CDATA[<p>Entity Framework (EF) 은 닷넷 어플리케이션 개발시 사용할 수 있는 ORM 도구들 중 하나이다. 다른 ORM 도구들에 비해 러닝커브도 적을 뿐 아니라 사용이 꽤 직관적이기 때문이다. 다만, 한가지 불편한 점이 있다면 데이터베이스 커넥션 스트링이 너무 길다는 것. 보통 <code>web.config</code> 혹은 <code>app.config</code>에 들어가는 EF 커넥션 스트링은 대략 아래와 같은 형태이다.</p>
<pre><code>&lt;connectionStrings&gt;
  &lt;add name="ApplicationDataContext"
       connectionString="metadata=res://*/ApplicationDataContext.csdl|res://*/ApplicationDataContext.ssdl|res://*/ApplicationDataContext.msl;provider=System.Data.SqlClient;provider connection string=&amp;quot;data source=(LocalDB)v11.0;attachdbfilename=|Data Directory|AdventureWorks.mdf;UserId=username;Password=passwordintegrated security=False;connect timeout=30;MultipleActiveResultSets=True;App=EntityFramework&amp;quot;"
       providerName="System.Data.EntityClient" /&gt;
&lt;/connectionStrings&gt;
</code></pre>
<p>이렇게 너무 커넥션 스트링 부분이 너무 길다보니 한눈에 들어오지도 않을 뿐더러, 상황에 따라 적절하게 서버가 바뀐다거나 데이터베이스가 바뀐다거나 하는 경우에는 수정하기가 쉽지 않다. 하지만, <code>.edmx</code> 파일을 이용해 EF를 구성할 경우 세 가지의 서로 다른 인자를 받아들이는 생성자가 생기는데, 그중 하나는 이 커넥션 스트링을 유연하게 구성할 수 있는 방법을 제시한다. 아래는 <code>.edmx</code> 파일을 이용하여 생성한 EF 데이터 콘텍스트의 생성자들이다.</p>
<pre><code>public partial class ApplicationDataContext : DbContext
{
  // Initialises a new instance of the ApplicationDataContext object.
  public ApplicationDataContext()
  {
    ...
  }

  // Initialises a new instance of the ApplicationDataContext object
  // with the given connection string.
  public ApplicationDataContext(string connectionString)
  {
    ...
  }

  // Initialises a new instance of the ApplicationDataContext object
  // with the given entity connection instance.
  public ApplicationDataContext(EntityConnection conn)
  {
    ...
  }
}
</code></pre>
<p>맨 아래 생성자를 보면 <code>EntityConnection</code> 인스턴스를 인자로 받아 EF 데이터 콘텍스트를 생성하는 것을 볼 수 있다. 바로 이 생성자를 이용하여 상황에 따라 유연하게 커넥션 스트링을 작성할 수 있다. 아래 코드는 이 방법을 이용하는 테스트 케이스 메소드이다.</p>
<pre><code>[Test]
[TestCase("serverName", "dbName", "username", "password", "System.Data.SqlClient", true)]
public void TestDatabaseConnection_SendParameters_GetDatabaseConnected(string serverName, string dbName, string username, string password, string provider, bool connected)
{
  var sqlBuilder = new SqlConnectionStringBuilder();
  sqlBuilder.DataSource = serverName;
  sqlBuilder.InitialCatalog = dbName;
  sqlBuilder.Username = username;
  sqlBuilder.Password = password;
  sqlBuiler.IntegratedSecurity = false;

  var efBuilder = new EntityConnectionStringBuilder();
  efBuilder.Provider = provider;
  efBuilder.ProviderConnectionString = sqlBuilder.ToString();
  efBuilder.MetaData = String.Format(@"res://*/{0}.csdl|res://*/{0}.ssdl|res://*/{0}.msl", "ApplicationDataContext");

  using (var conn = new EntityConnection(efBuilder.ToString()))
  {
    conn.Open();
    Assert.AreEqual(connected, conn.State == ConnectionState.Open);
    conn.Close();
  }
}
</code></pre>
<p>위의 코드에서 알 수 있다시피,</p>
<ol>
<li><code>SqlConnectionStringBuilder</code> 인스턴스를 통해 기본적인 커넥션 스트링을 만들고,</li>
<li>그것을 다시 <code>EntityConnectionStringBuilder</code> 인스턴스로 한 번 더 감싸준 후에,</li>
<li>이것을 <code>EntityConnection</code> 객체로 보내 데이터베이스 커넥션을 완성한다.</li>
<li>이렇게 만들어진 <code>EntityConnection</code> 인스턴스는 맨 위의 <code>ApplicationDataContext(EntityConnection conn) { ... }</code> 생성자의 인자로 쓰여 데이터베이스 트랜잭션을 위한 EF 인스턴스 초기화를 가능하게 한다.</li>
</ol>
<p>위의 테스트 코드에서 알 수 있다시피, <code>web.config</code> 또는 <code>app.config</code> 사용시 굳이 기나긴 커넥션 스트링을 사용하는 것 보다는 의미있는 데이터 – 서버명, DB명, 유저네임, 패스워드 등 – 를 <code>&lt;appSettings&gt;</code> 섹션에 넣어두고 그것을 상황에 따라 가변적으로 호출하여 커넥션을 만드는 것이 개발자 관점에서는 더욱 수월한 일이 아닐까 한다.</p>
<p>참조: <a href="http://msdn.microsoft.com/en-us/library/system.data.entityclient.entityconnectionstringbuilder.aspx" target="_blank">EntityConnectionStringBuilder Class</a></p>
]]>
            </content:encoded>
            <wfw:commentRss>http://blog.aliencube.org/ko/2013/09/02/setting-up-connection-string-for-entity-framework-dynamically/feed/</wfw:commentRss>
            <slash:comments>0</slash:comments>
        </item>
    </channel>
</rss>
